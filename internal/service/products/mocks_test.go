// Code generated by mockigo. DO NOT EDIT.

//go:generate mockigo

package products

import context "context"
import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"
import models "github.com/shackra/reviewer/internal/models"

var _ = match.Any[int]

type RepositoryMock struct {
	mock *mock.Mock
}

func NewRepositoryMock(t mock.Testing) *RepositoryMock {
	t.Helper()
	return &RepositoryMock{mock: mock.NewMock(t)}
}

type _RepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RepositoryMock) EXPECT() _RepositoryMock_Expecter {
	return _RepositoryMock_Expecter{mock: _mock.mock}
}

type _RepositoryMock_AddProductReview_Call struct {
	*mock.Call
}

func (_mock *RepositoryMock) AddProductReview(ctx context.Context, id string, reviewer string, text string, rating float32) error {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("AddProductReview", ctx, id, reviewer, text, rating)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _RepositoryMock_Expecter) AddProductReview(ctx match.Arg[context.Context], id match.Arg[string], reviewer match.Arg[string], text match.Arg[string], rating match.Arg[float32]) _RepositoryMock_AddProductReview_Call {
	return _RepositoryMock_AddProductReview_Call{Call: _expecter.mock.ExpectCall("AddProductReview", ctx.Matcher, id.Matcher, reviewer.Matcher, text.Matcher, rating.Matcher)}
}

func (_call _RepositoryMock_AddProductReview_Call) Return(_r0 error) _RepositoryMock_AddProductReview_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RepositoryMock_AddProductReview_Call) RunReturn(f func(ctx context.Context, id string, reviewer string, text string, rating float32) error) _RepositoryMock_AddProductReview_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _RepositoryMock_GetProducts_Call struct {
	*mock.Call
}

func (_mock *RepositoryMock) GetProducts(ctx context.Context, page int, size int) ([]models.Product, bool, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("GetProducts", ctx, page, size)
	var _r0 []models.Product
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.([]models.Product)
	}
	_r1 := _results.Get(1).(bool)
	_r2 := _results.Error(2)
	return _r0, _r1, _r2
}

func (_expecter _RepositoryMock_Expecter) GetProducts(ctx match.Arg[context.Context], page match.Arg[int], size match.Arg[int]) _RepositoryMock_GetProducts_Call {
	return _RepositoryMock_GetProducts_Call{Call: _expecter.mock.ExpectCall("GetProducts", ctx.Matcher, page.Matcher, size.Matcher)}
}

func (_call _RepositoryMock_GetProducts_Call) Return(_r0 []models.Product, _r1 bool, _r2 error) _RepositoryMock_GetProducts_Call {
	_call.Call.Return(_r0, _r1, _r2)
	return _call
}

func (_call _RepositoryMock_GetProducts_Call) RunReturn(f func(ctx context.Context, page int, size int) ([]models.Product, bool, error)) _RepositoryMock_GetProducts_Call {
	_call.Call.RunReturn(f)
	return _call
}
